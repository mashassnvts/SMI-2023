Microsoft (R) Macro Assembler Version 14.37.32825.0	    12/18/23 14:20:21
asm.asm							     Page 1 - 1


				.586P
				.model flat, stdcall
				includelib libucrt.lib
				includelib kernel32.lib
				includelib ..\Debug\Library.lib
				ExitProcess PROTO :DWORD

				EXTRN CONCAT: proc
				EXTRN LINELEN: proc
				EXTRN RANDOM: proc
				EXTRN SQRT: proc
				EXTRN OutNumber: proc
				EXTRN OutLine: proc
				EXTRN OutBool: proc
				EXTRN OutNumberLn: proc
				EXTRN OutLineLn: proc
				EXTRN OutBoolLn: proc

				.stack 4096

 00000000			.const
 00000000 45 78 63 65 70		null_division BYTE "Exception: деление на ноль", 0
	   74 69 6F 6E 3A
	   20 E4 E5 EB E5
	   ED E8 E5 20 ED
	   E0 20 ED EE EB
	   FC 00
 0000001B 0002				lit1	SWORD 2
 0000001D 0003				lit2	SWORD 3
 0000001F D1 EC E5 ED E0		lit3	BYTE "Смена логина проведена успешно!", 0
	   20 EB EE E3 E8
	   ED E0 20 EF F0
	   EE E2 E5 E4 E5
	   ED E0 20 F3 F1
	   EF E5 F8 ED EE
	   21 00
 0000003F C2 E0 F8 20 ED		lit4	BYTE "Ваш новый логин: ", 0
	   EE E2 FB E9 20
	   EB EE E3 E8 ED
	   3A 20 00
 00000051 D0 E5 E7 F3 EB		lit5	BYTE "Результат: ", 0
	   FC F2 E0 F2 3A
	   20 00
 0000005D 0006				lit6	SWORD 6
 0000005F D0 E5 E7 F3 EB		lit7	BYTE "Результат вычисления выражения отрицательный? - ", 0
	   FC F2 E0 F2 20
	   E2 FB F7 E8 F1
	   EB E5 ED E8 FF
	   20 E2 FB F0 E0
	   E6 E5 ED E8 FF
	   20 EE F2 F0 E8
	   F6 E0 F2 E5 EB
	   FC ED FB E9 3F
	   20 2D 20 00
 00000090 FFF8				lit8	SWORD -8
 00000092 0005				lit9	SWORD 5
 00000094 0000				lit10	SWORD 0
 00000096 D0 E5 E7 F3 EB		lit11	BYTE "Результат был: ", 0
	   FC F2 E0 F2 20
	   E1 FB EB 3A 20
	   00
 000000A6 49 76 61 6E 6F		lit12	BYTE "Ivanov Ivan", 0
	   76 20 49 76 61
	   6E 00
 000000B2 C2 E0 F8 20 E1		lit13	BYTE "Ваш баланс (в $): ", 0
	   E0 EB E0 ED F1
	   20 28 E2 20 24
	   29 3A 20 00
 000000C5 000A				lit14	SWORD 10
 000000C7 0001				lit15	SWORD 1
 000000C9 CA E2 E0 E4 F0		lit16	BYTE "Квадратный корень из 10 равен 4? - ", 0
	   E0 F2 ED FB E9
	   20 EA EE F0 E5
	   ED FC 20 E8 E7
	   20 31 30 20 F0
	   E0 E2 E5 ED 20
	   34 3F 20 2D 20
	   00
 000000ED 0004				lit17	SWORD 4
 000000EF C4 E0 00			lit18	BYTE "Да", 0
 000000F2 CD E5 F2 00			lit19	BYTE "Нет", 0
 000000F6 C4 EB E8 ED E0		lit20	BYTE "Длина строки равна 0? - ", 0
	   20 F1 F2 F0 EE
	   EA E8 20 F0 E0
	   E2 ED E0 20 30
	   3F 20 2D 20 00
 0000010F 61 62 63 64 65		lit21	BYTE "abcdef", 0
	   66 00
 00000116 48 65 6C 6C 6F		lit22	BYTE "Hello, ", 0
	   2C 20 00
 0000011E 69 74 27 73 20		lit23	BYTE "it's SMI-2023!", 0
	   53 4D 49 2D 32
	   30 32 33 21 00

 00000000			.data
 00000000  00000100 [			buffer BYTE 256 dup(0)
	    00
	   ]
 00000100 0000				power_i	SWORD 0
 00000102 0000				power_res	SWORD 0
 00000104 0000				program_resPow	SWORD 0
 00000106 0000				program_expr	SWORD 0
 00000108 0000				program_resNeg	SWORD 0
 0000010A 00000000			program_login	DWORD ?
 0000010E 0000				program_balance	SWORD 0
 00000110 0000				program_resSqrt	SWORD 0
 00000112 00000000			program_lineA	DWORD ?
 00000116 0000				program_lengthA	SWORD 0
 00000118 0000				program_resA	SWORD 0
 0000011A 00000000			program_resConcat	DWORD ?

 00000000			.code

 00000000			power PROC power_a : SWORD, power_b : SWORD
 00000003  66| FF 35			push lit1
	   0000001B R
 0000000A  66| 8F 05			pop power_i
	   00000100 R
 00000011  66| FF 75 08			push power_a
 00000015  66| FF 35			push lit2
	   0000001D R
 0000001C  66| 58			pop ax
 0000001E  66| 5B			pop bx
 00000020  66| F7 E3			mul bx
 00000023  66| 50			push ax
 00000025  66| FF 75 0C			push power_b
 00000029  66| FF 35			push lit1
	   0000001B R
 00000030  66| 58			pop ax
 00000032  66| 5B			pop bx
 00000034  66| 03 C3			add ax, bx
 00000037  66| 50			push ax
 00000039  66| 5B			pop bx
 0000003B  66| 58			pop ax
 0000003D  66| 2B C3			sub ax, bx
 00000040  66| 50			push ax
 00000042  66| 8F 05			pop power_res
	   00000102 R
 00000049  66| FF 35			push power_res
	   00000102 R
 00000050  EB 00			jmp local0
 00000052			local0:
 00000052  58				pop eax
					ret
 00000057			power ENDP

 00000057			yourLogin PROC yourLogin_login : DWORD
 0000005A  68 0000001F R		push offset lit3
 0000005F  E8 00000000 E		call OutLineLn
 00000064  68 0000003F R		push offset lit4
 00000069  E8 00000000 E		call OutLine
 0000006E  FF 75 08			push yourLogin_login
 00000071  E8 00000000 E		call OutLineLn
 00000076			local1:
 00000076  58				pop eax
					ret
					ret
 0000007F			yourLogin ENDP

 0000007F			program PROC
 0000007F  68 00000051 R		push offset lit5
 00000084  E8 00000000 E		call OutLine
 00000089  66| FF 35			push lit6
	   0000005D R
 00000090  66| FF 35			push lit2
	   0000001D R
 00000097  66| 5A			pop dx
 00000099  66| 5A			pop dx
 0000009B  0F BF 05			movsx eax, lit2
	   0000001D R
 000000A2  50				push eax
 000000A3  0F BF 05			movsx eax, lit6
	   0000005D R
 000000AA  50				push eax
 000000AB  E8 FFFFFF50			call power
 000000B0  66| 50			push ax
 000000B2  66| 8F 05			pop program_resPow
	   00000104 R
 000000B9  0F BF 05			movsx eax, program_resPow
	   00000104 R
 000000C0  50				push eax
 000000C1  E8 00000000 E		call OutNumberLn
 000000C6  68 0000005F R		push offset lit7
 000000CB  E8 00000000 E		call OutLine
 000000D0  66| FF 35			push lit8
	   00000090 R
 000000D7  66| FF 35			push lit1
	   0000001B R
 000000DE  66| 5B			pop bx
 000000E0  66| 58			pop ax
 000000E2  66| 83 FB 00			cmp bx, 0
 000000E6  0F 84 00000237		je nulldiv
 000000EC  66| 99			cwd
 000000EE  66| F7 FB			idiv bx
 000000F1  66| 50			push ax
 000000F3  66| FF 35			push lit9
	   00000092 R
 000000FA  66| FF 35			push lit1
	   0000001B R
 00000101  66| 5B			pop bx
 00000103  66| 58			pop ax
 00000105  66| 83 FB 00			cmp bx, 0
 00000109  0F 84 00000214		je nulldiv
 0000010F  66| 99			cwd
 00000111  66| F7 FB			idiv bx
 00000114  66| 52			push dx
 00000116  66| 5B			pop bx
 00000118  66| 58			pop ax
 0000011A  66| 2B C3			sub ax, bx
 0000011D  66| 50			push ax
 0000011F  66| 8F 05			pop program_expr
	   00000106 R
 00000126  66| FF 35			push program_expr
	   00000106 R
 0000012D  66| FF 35			push lit10
	   00000094 R
 00000134  66| 5B			pop bx
 00000136  66| 58			pop ax
 00000138  66| 3B C3			cmp ax, bx
 0000013B  7E 02			jle l0
 0000013D  7F 08			jg l1
 0000013F			l0:
 0000013F  66| B8 0001			mov ax, 1
 00000143  66| 50			push ax
 00000145  EB 06			jmp endofexpr0
 00000147			l1:
 00000147  66| B8 0000			mov ax, 0
 0000014B  66| 50			push ax

 0000014D			endofexpr0:
 0000014D  66| 58			pop ax
 0000014F  66| 83 F8 00			cmp ax, 0
 00000153  74 02			je l2
 00000155  75 08			jne l3
 00000157			l2:
 00000157  66| B8 0000			mov ax, 0
 0000015B  66| 50			push ax
 0000015D  EB 06			jmp endofexpr1
 0000015F			l3:
 0000015F  66| B8 0001			mov ax, 1
 00000163  66| 50			push ax

 00000165			endofexpr1:
 00000165  66| 8F 05			pop program_resNeg
	   00000108 R
 0000016C  0F BF 05			movsx eax, program_resNeg
	   00000108 R
 00000173  50				push eax
 00000174  E8 00000000 E		call OutBoolLn
 00000179  68 00000096 R		push offset lit11
 0000017E  E8 00000000 E		call OutLine
 00000183  0F BF 05			movsx eax, program_expr
	   00000106 R
 0000018A  50				push eax
 0000018B  E8 00000000 E		call OutNumberLn
 00000190  68 000000A6 R		push offset lit12
 00000195  8F 05 0000010A R		pop program_login
 0000019B  FF 35 0000010A R		push program_login
 000001A1  E8 FFFFFEB1			call yourLogin
 000001A6  68 000000B2 R		push offset lit13
 000001AB  E8 00000000 E		call OutLine
 000001B0  66| FF 35			push lit14
	   000000C5 R
 000001B7  66| FF 35			push lit15
	   000000C7 R
 000001BE  66| 5A			pop dx
 000001C0  66| 5A			pop dx
 000001C2  0F BF 05			movsx eax, lit15
	   000000C7 R
 000001C9  50				push eax
 000001CA  0F BF 05			movsx eax, lit14
	   000000C5 R
 000001D1  50				push eax
 000001D2  E8 00000000 E		call RANDOM
 000001D7  66| 50			push ax
 000001D9  66| FF 35			push lit9
	   00000092 R
 000001E0  66| 58			pop ax
 000001E2  66| 5B			pop bx
 000001E4  66| 03 C3			add ax, bx
 000001E7  66| 50			push ax
 000001E9  66| 8F 05			pop program_balance
	   0000010E R
 000001F0  0F BF 05			movsx eax, program_balance
	   0000010E R
 000001F7  50				push eax
 000001F8  E8 00000000 E		call OutNumberLn
 000001FD  68 000000C9 R		push offset lit16
 00000202  E8 00000000 E		call OutLine
 00000207  66| FF 35			push lit14
	   000000C5 R
 0000020E  66| 5A			pop dx
 00000210  0F BF 05			movsx eax, lit14
	   000000C5 R
 00000217  50				push eax
 00000218  E8 00000000 E		call SQRT
 0000021D  66| 50			push ax
 0000021F  66| 8F 05			pop program_resSqrt
	   00000110 R
 00000226  66| A1			mov ax, program_resSqrt
	   00000110 R
 0000022C  66| 3B 05			cmp ax, lit17
	   000000ED R
 00000233  74 02			je m0
 00000235  75 0C			jne m1
 00000237			m0:
 00000237  68 000000EF R		push offset lit18
 0000023C  E8 00000000 E		call OutLineLn
 00000241  EB 0A			jmp e0
 00000243			m1:
 00000243  68 000000F2 R		push offset lit19
 00000248  E8 00000000 E		call OutLineLn
 0000024D			e0:
 0000024D  68 000000F6 R		push offset lit20
 00000252  E8 00000000 E		call OutLine
 00000257  68 0000010F R		push offset lit21
 0000025C  8F 05 00000112 R		pop program_lineA
 00000262  FF 35 00000112 R		push program_lineA
 00000268  66| 5A			pop dx
 0000026A  FF 35 00000112 R		push program_lineA
 00000270  E8 00000000 E		call LINELEN
 00000275  66| 50			push ax
 00000277  66| 8F 05			pop program_lengthA
	   00000116 R
 0000027E  66| FF 35			push program_lengthA
	   00000116 R
 00000285  66| FF 35			push lit10
	   00000094 R
 0000028C  66| 5B			pop bx
 0000028E  66| 58			pop ax
 00000290  66| 3B C3			cmp ax, bx
 00000293  75 02			jne l4
 00000295  74 08			je l5
 00000297			l4:
 00000297  66| B8 0001			mov ax, 1
 0000029B  66| 50			push ax
 0000029D  EB 06			jmp endofexpr2
 0000029F			l5:
 0000029F  66| B8 0000			mov ax, 0
 000002A3  66| 50			push ax

 000002A5			endofexpr2:
 000002A5  66| 58			pop ax
 000002A7  66| 83 F8 00			cmp ax, 0
 000002AB  74 02			je l6
 000002AD  75 08			jne l7
 000002AF			l6:
 000002AF  66| B8 0000			mov ax, 0
 000002B3  66| 50			push ax
 000002B5  EB 06			jmp endofexpr3
 000002B7			l7:
 000002B7  66| B8 0001			mov ax, 1
 000002BB  66| 50			push ax

 000002BD			endofexpr3:
 000002BD  66| 8F 05			pop program_resA
	   00000118 R
 000002C4  66| A1			mov ax, program_resA
	   00000118 R
 000002CA  66| 83 F8 00			cmp ax, 0
 000002CE  75 02			jnz m2
 000002D0  74 0C			jz m3
 000002D2			m2:
 000002D2  68 000000F2 R		push offset lit19
 000002D7  E8 00000000 E		call OutLineLn
 000002DC  EB 0A			jmp e1
 000002DE			m3:
 000002DE  68 000000EF R		push offset lit18
 000002E3  E8 00000000 E		call OutLineLn
 000002E8			e1:
 000002E8  68 00000116 R		push offset lit22
 000002ED  68 0000011E R		push offset lit23
 000002F2  66| 5A			pop dx
 000002F4  66| 5A			pop dx
 000002F6  68 0000011E R		push offset lit23
 000002FB  68 00000116 R		push offset lit22
 00000300  68 00000000 R		push offset buffer
 00000305  E8 00000000 E		call CONCAT
 0000030A  50				push eax
 0000030B  8F 05 0000011A R		pop program_resConcat
 00000311  FF 35 0000011A R		push program_resConcat
 00000317  E8 00000000 E		call OutLineLn
 0000031C			theend:
 0000031C  6A 00			push 0
 0000031E  E8 00000000 E		call ExitProcess
 00000323			nulldiv:
 00000323  68 00000000 R		push offset null_division
 00000328  E8 00000000 E		call OutLineLn
 0000032D  6A FF			push -1
 0000032F  E8 00000000 E		call ExitProcess
 00000334			program ENDP
				end program
Microsoft (R) Macro Assembler Version 14.37.32825.0	    12/18/23 14:20:21
asm.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 0000012D Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000011E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000334 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
power  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000057 Public STDCALL
  power_a  . . . . . . . . . . .	Word	 bp + 00000008
  power_b  . . . . . . . . . . .	Word	 bp + 0000000C
  local0 . . . . . . . . . . . .	L Near	 00000052 _TEXT	
program  . . . . . . . . . . . .	P Near	 0000007F _TEXT	Length= 000002B5 Public STDCALL
  l0 . . . . . . . . . . . . . .	L Near	 0000013F _TEXT	
  l1 . . . . . . . . . . . . . .	L Near	 00000147 _TEXT	
  endofexpr0 . . . . . . . . . .	L Near	 0000014D _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 00000157 _TEXT	
  l3 . . . . . . . . . . . . . .	L Near	 0000015F _TEXT	
  endofexpr1 . . . . . . . . . .	L Near	 00000165 _TEXT	
  m0 . . . . . . . . . . . . . .	L Near	 00000237 _TEXT	
  m1 . . . . . . . . . . . . . .	L Near	 00000243 _TEXT	
  e0 . . . . . . . . . . . . . .	L Near	 0000024D _TEXT	
  l4 . . . . . . . . . . . . . .	L Near	 00000297 _TEXT	
  l5 . . . . . . . . . . . . . .	L Near	 0000029F _TEXT	
  endofexpr2 . . . . . . . . . .	L Near	 000002A5 _TEXT	
  l6 . . . . . . . . . . . . . .	L Near	 000002AF _TEXT	
  l7 . . . . . . . . . . . . . .	L Near	 000002B7 _TEXT	
  endofexpr3 . . . . . . . . . .	L Near	 000002BD _TEXT	
  m2 . . . . . . . . . . . . . .	L Near	 000002D2 _TEXT	
  m3 . . . . . . . . . . . . . .	L Near	 000002DE _TEXT	
  e1 . . . . . . . . . . . . . .	L Near	 000002E8 _TEXT	
  theend . . . . . . . . . . . .	L Near	 0000031C _TEXT	
  nulldiv  . . . . . . . . . . .	L Near	 00000323 _TEXT	
yourLogin  . . . . . . . . . . .	P Near	 00000057 _TEXT	Length= 00000028 Public STDCALL
  yourLogin_login  . . . . . . .	DWord	 bp + 00000008
  local1 . . . . . . . . . . . .	L Near	 00000076 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CONCAT . . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
LINELEN  . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
OutBoolLn  . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
OutBool  . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
OutLineLn  . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
OutLine  . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
OutNumberLn  . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
OutNumber  . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
RANDOM . . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
SQRT . . . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
buffer . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lit10  . . . . . . . . . . . . .	Word	 00000094 CONST	
lit11  . . . . . . . . . . . . .	Byte	 00000096 CONST	
lit12  . . . . . . . . . . . . .	Byte	 000000A6 CONST	
lit13  . . . . . . . . . . . . .	Byte	 000000B2 CONST	
lit14  . . . . . . . . . . . . .	Word	 000000C5 CONST	
lit15  . . . . . . . . . . . . .	Word	 000000C7 CONST	
lit16  . . . . . . . . . . . . .	Byte	 000000C9 CONST	
lit17  . . . . . . . . . . . . .	Word	 000000ED CONST	
lit18  . . . . . . . . . . . . .	Byte	 000000EF CONST	
lit19  . . . . . . . . . . . . .	Byte	 000000F2 CONST	
lit1 . . . . . . . . . . . . . .	Word	 0000001B CONST	
lit20  . . . . . . . . . . . . .	Byte	 000000F6 CONST	
lit21  . . . . . . . . . . . . .	Byte	 0000010F CONST	
lit22  . . . . . . . . . . . . .	Byte	 00000116 CONST	
lit23  . . . . . . . . . . . . .	Byte	 0000011E CONST	
lit2 . . . . . . . . . . . . . .	Word	 0000001D CONST	
lit3 . . . . . . . . . . . . . .	Byte	 0000001F CONST	
lit4 . . . . . . . . . . . . . .	Byte	 0000003F CONST	
lit5 . . . . . . . . . . . . . .	Byte	 00000051 CONST	
lit6 . . . . . . . . . . . . . .	Word	 0000005D CONST	
lit7 . . . . . . . . . . . . . .	Byte	 0000005F CONST	
lit8 . . . . . . . . . . . . . .	Word	 00000090 CONST	
lit9 . . . . . . . . . . . . . .	Word	 00000092 CONST	
null_division  . . . . . . . . .	Byte	 00000000 CONST	
power_i  . . . . . . . . . . . .	Word	 00000100 _DATA	
power_res  . . . . . . . . . . .	Word	 00000102 _DATA	
program_balance  . . . . . . . .	Word	 0000010E _DATA	
program_expr . . . . . . . . . .	Word	 00000106 _DATA	
program_lengthA  . . . . . . . .	Word	 00000116 _DATA	
program_lineA  . . . . . . . . .	DWord	 00000112 _DATA	
program_login  . . . . . . . . .	DWord	 0000010A _DATA	
program_resA . . . . . . . . . .	Word	 00000118 _DATA	
program_resConcat  . . . . . . .	DWord	 0000011A _DATA	
program_resNeg . . . . . . . . .	Word	 00000108 _DATA	
program_resPow . . . . . . . . .	Word	 00000104 _DATA	
program_resSqrt  . . . . . . . .	Word	 00000110 _DATA	

	   0 Warnings
	   0 Errors
